#1.a. Defina una función que reciba como argumento una cadena de texto y retorne un valor entero indicando la cantidad de vocales que contiene la cadena Ejemplo: “agua” -> 3, “pepe” ->2

def vocales_en(palabra):
  cont = 0
  
  for letra in palabra:
    if letra.lower() in ("a","e","i","o","u"):
      cont += 1
      
  return cont


#1.b. Defina una función que genere una lista de palabras hasta que se ingrese la palabra “fin” la cual NO debe ser almacenada en la lista, por cada palabra, también se guardara la cantidad de vocales que contiene la misma, para esto deberá utilizar la función definida en el punto 1.a., al finalizar la función deberá retornar la lista generada. La lista resultado deberá tener una estructura similar a:
#1) [[“uno”,2],[ “pepe”,2],[”agua!”,3],…etc]

def lista_nro_vocales():
  lista_palabras_vocales = []
  palabras = input("ingrese una palabra: ")
    
  while palabras.lower() != "fin":
    lista_palabras_vocales.append([palabras,vocales_en(palabras)])
    palabras = input("ingrese una palabra: ")
  
  return lista_palabras_vocales

lista_nro_vocales()

#1.c. defina una función que reciba como argumento la lista generada en el punto 1.b) e imprimir las palabras que tienen mas de 3 vocales.

def tiene_mas_vocales(lista_con_vocales):
  lista_mas_vocales = []
  
  for pal in lista_con_vocales:
    if vocales_en(pal[0]) > 3:
      lista_mas_vocales.append(pal[0])

  return lista_mas_vocales
#print(tiene_mas_vocales(lista_nro_vocales(palabras)))

#1.d. escriba el código del programa que integra las 3 funciones antes definidas.

#################################################################################################################################

#2.a) Realice un programa para manejar equipos de fútbol, Armar una lista que tenga información sobre los equipos de fútbol. Para cada equipo deberán tener: el nombre del equipo, puntaje en la tabla de posiciones y la cantidad de goles a favor.

lista_equipos = [["River",50,100],["boca",49,79],["independiente",30,69],["racing",40,101],["san lorenzo",15,68]]
  
#2.b) Usando la lista anterior, imprimir la cantidad de goles a favor que tienen los equipos que están en la primera y última posición de la lista.

def primero(lista):
  puntaje_max = 0
  equipo_max = ""
  goles = 0
  for equipo in lista:
    if equipo[1] > puntaje_max:
      puntaje_max = equipo[1]
      equipo_max = equipo[0]
      goles = equipo[2]
  print("equipo puntero: " + equipo_max + ". goles: " + str(goles))

def ultimo(lista):
  puntaje_min = 9999999
  equipo_min = ""
  goles = 0
  for equipo in lista:
    if equipo[1] < puntaje_min:
      puntaje_min = equipo[1]
      equipo_min = equipo[0]
      goles = equipo[2]
  print("equipo ultimo: " + equipo_min + ". goles: " + str(goles))

#2.c) Imprimir el nombre del equipo Campeón de la lista generada en el punto 2.a., el equipo campeón es aquel que sumo más puntos.

def equipo_campeon(lista_equipos):
  campeon = " "
  max = 0
  for equipo in lista_equipos:
    if equipo[1] > max:
      max = equipo[1]
      campeon = equipo[0]
  return campeon

print(equipo_campeon(lista_equipos))

#################################################################################################################################

#3.a) Realice una función que procesa la información de alumnos de la UNAJ. De cada alumno se conoce legajo, nombre, apellido, contraseña. El procesamiento termina cuando se ingresa el número de legajo 0. La función deberá retornar una lista con la información procesada.

def alumnos_unaj():
  legajo = int(input("legajo(0 para terminar): "))
  lista = [[1234,"santiago","suarez","12345678"],[134,"enzo","perez","12345678r"],[11,"manuel","belgrano","123456780"]]
  
  while legajo != 0:
    nombre = input("nombre: ")
    apellido = input("apellido: ")
    contra = input("contraseña: ")
    print()
    lista.append([legajo,nombre,apellido,contra])
    legajo = int(input("legajo: "))
    
  return lista
  
#3.b) Realice una función llamada imprimir_alumno que recibe como parámetro una lista con los datos de un alumno (Legajo, nombre, apellido, contraseña), los datos del alumno serán mostrados por pantalla con la forma:
#Legajo:XXXX
#Nombre:XXXX
#Apellido:XXXX
#Contraseña:XXXXX

#lista_alumnos = [1234,"santiago","suarez","12345678"]
def imprimir_alumno(alumno):
  print("legajo: " + str(alumno[0]))
  print("nombre: " + alumno[1])
  print("apellido: " + alumno[2])
  print("contraseña: " + alumno[3] + "\n")

def imprimir_alumno_de_lista(alumnos):
  for alumno in alumnos:
    imprimir_alumno(alumno)

  
#3.c) Realice un función llamada legajo_menor que recibe como parámetro una lista de alumnos, de cada alumno se conoce la información (legajo, nombre, apellido, contraseña), la función debe buscar cuál es el alumno con el menor legajo dentro de la lista y retornarlo

def legajo_menor(lista_alumnos):
  min = 999999
  nombre = ""
  apellido = ""
  contra = ""
  alumno_legajo_menor = []
  
  for alumno in lista_alumnos:
    if alumno[0] < min:
      min = alumno[0]
      nombre = alumno[1]
      apellido = alumno[2]
      contra = alumno[3]
  
  alumno_legajo_menor.append(min)
  alumno_legajo_menor.append(nombre)
  alumno_legajo_menor.append(apellido)
  alumno_legajo_menor.append(contra)
  
  return imprimir_alumno(alumno_legajo_menor)

#3.d) Realice un función llamada nombre_mas_largo que recibe como parámetro una lista de alumnos. La función debe buscar cuál es el alumno con el nombre más largo dentro de la lista y retornarlo.

def nombre_mas_largo(lista_alumnos):
  max = ""
  legajo = 0
  apellido = ""
  contra = ""
  alumno_nombre_largo = []

  for alumno in lista_alumnos:
    if len(alumno[1]) > len(max):
      legajo = alumno[0]
      max = alumno[1]
      apellido = alumno[2]
      contra = alumno[3]

  alumno_nombre_largo.append(legajo)
  alumno_nombre_largo.append(max)
  alumno_nombre_largo.append(apellido)
  alumno_nombre_largo.append(contra)
  
  return imprimir_alumno(alumno_nombre_largo)

#3.e) Realice un función llamada controlar_clave que recibe como parámetro un alumno,(legajo, nombre, apellido, contraseña). La función debe controlar si la contraseña es mayor a 6 caracteres y termina con un número, deberá imprimir un mensaje especificando el error cometido en caso de no cumplir las condiciones o bien imprimir los datos del alumno si la clave cumple con todas las condiciones.

def controlar_clave(alumno):
  if len(alumno[3]) > 6 and alumno[3][-1] in ("1","2","3","4","5","6","7","8","9","0"):
    return imprimir_alumno(alumno)
  else:
    return "por favor establezca una contraseña con más de 6 caracteres y que finalice en un número."


#3.f).Realice una función llamada verificar_claves que recibe como parámetro una lista de alumnos, la función deberá controlar por cada alumno si la contraseña que usa cumple con: ser mayor a 6 caracteres y terminar con un número

def verificar_claves(lista_alumnos):
  for alumno in lista_alumnos:
    if len(alumno[3]) > 6 and alumno[3][-1] in ("1","2","3","4","5","6","7","8","9","0"):
      mensaje = alumno[1] + " " + alumno[2] + ": cotraseña válida"
    else:
      mensaje = alumno[1] + " " + alumno[2] + ": reestablecer contraseña"
    print(mensaje)
  print()

#Construir un menú, el menú deberá permitir ingresar 5 opciones, La opción 0 permite salir del menú, el resto de las opciones permiten :
#- imprimir los datos de todos los alumnos con el formato pedido en el punto a)
#- imprimir los datos del alumno que tiene el legajo más chico.
#- imprimir los datos del alumno que tiene el nombre más largo.
#- Imprimir si las contraseñas de cada alumno cumplen con un tamaño mayor a 6 caracteres y terminan con un número.

#(al menú le agregué una opción extra que es la de agregar alumnos)

lista_alumnos_unaj = alumnos_unaj()

menu = int(input("Menú Principal\n 1 - Ver datos de los alumnos.\n 2 - Ver alumno con el legajo menor.\n 3 - Ver alumno con el nombre más largo.\n 4 - Ver si las contraseñas son válidas.\n 5 - Agregar alumno\n 0 - Salir \n"))

while menu != 0:
  
  if menu == 1:
    imprimir_alumno_de_lista(lista_alumnos_unaj)
  elif menu == 2:
    legajo_menor(lista_alumnos_unaj)
  elif menu == 3:
    nombre_mas_largo(lista_alumnos_unaj)
  elif menu == 4:
    verificar_claves(lista_alumnos_unaj)
  elif menu == 5:
    lista_alumnos_unaj = alumnos_unaj()
  else:
    print("ERROR - ingrese un valor válido")
    
  menu = int(input("Menú Principal\n 1 - Ver datos de los alumnos.\n 2 - Ver alumno con el legajo menor.\n 3 - Ver alumno con el nombre más largo.\n 4 - Ver si las contraseñas son válidas.\n 5 - Agregar alumno\n 0 - Salir \n"))


#####################################################################################


#Ejercicio 4: Se desea realizar un programa para una universidad. El mismo deberá permitir guardar la información de todos los cursos que se dictan en la misma. La cantidad de cursos existentes es ingresado por el usuario del sistema. De cada curso se debe conocer: Nombre, Cantidad de Clases, Día de Dictado, Hora de Comienzo, Duración en minutos. Importante: si la duración del curso es mayor a 360 minutos, NO se debe guardar la información del mismo.

def cargar_datos_cursos():

  cont = 0
  cant_cursos = int(input("ingrese la cantidad de cursos: "))
  lista = []
  
  while cont < cant_cursos:
    nombre = input("ingrese el nombre del curso: ")
    cant_clases = int(input("ingrese la cantidad de clases: "))
    dia = input("ingrese el día de dictado: ")
    hora = float(input("ingrese el horario de comienzo: "))
    duracion = float(input("ingrese la duración en minutos: "))
    print()
    if duracion <= 360:
      dato = [nombre,cant_clases,dia,hora,duracion]
      lista.append(dato)
    cont += 1
  
  return lista

#El programa debe permitir
#a) Imprimir todos los cursos que tengan más de 5 clases
#b) Imprimir los cursos que se dictan en un día de la semana indicado por el usuario.
#c) Imprimir el curso más intensivo (definido por la cantidad de clases y la duración de cada clase)
#d) Imprimir los datos en que se dicta un curso indicado por el usuario.
#e) Imprima todos los cursos que comienzan con una letra indicada por el usuario.
#El programa escrito deberá mostrar un menú para que el usuario elija la opción deseada. Importante: el sistema termina cuando el usuario elige la opción “salir”

#funciones para imprimir una lista y una lista dentro de otra lista
def imprimir_clase(lista):
  print("curso: " + lista[0])
  print("cantidad de clases: ", lista[1])
  print("día de dictado: " + lista[2])
  print("horario: ", lista[3], " hs.")
  print("duración: " + str(lista[4]) + " minutos \n")

def imprimir_clase_de_lista(lista):
  for dato in lista:
    imprimir_clase(dato)

#funcion que imprime los cursos con mas de 5 clases
def mas_cinco_clases(lista):
  lista_nueva = []
  for clase in lista:
    if clase[1] > 5:
      dato = [clase[0],clase[1],clase[2],clase[3],clase[4]]
      lista_nueva.append(dato)
  return imprimir_clase_de_lista(lista_nueva)

#funcion que imprime los cursos de un dia de la semana indicado
def dia_semana(lista):
  dia = input("ingrese un día de la semana: ")
  lista_nueva = []
  for clase in lista:
    if clase[2].lower() == dia:
      dato = [clase[0],clase[1],clase[2],clase[3],clase[4]]
      lista_nueva.append(dato)
  return imprimir_clase_de_lista(lista_nueva)

#funcion que imprime el curso mas intensivo
def mas_intensivo(lista):
  max = 0
  lista_nueva = []
  for clase in lista:
    carga = float(clase[1] * clase[4])
    if carga > max:
      max = carga
      dato = [clase[0],clase[1],clase[2],clase[3],clase[4]]
  lista_nueva.append(dato)
  return imprimir_clase_de_lista(lista_nueva)

#funcion que imprime datos del curso indicado por teclado
def datos_curso(lista):
  curso_user = input("sobre que curso desea consultar? ")
  lista_nueva = []
  for curso in lista:
    if curso[0].lower() == curso_user:
      dato = [curso[0],curso[1],curso[2],curso[3],curso[4]]
      lista_nueva.append(dato)
  return imprimir_clase_de_lista(lista_nueva)

#funcion que imprime datos del curso indicado por teclado (letra inicial)
def datos_curso_letra(lista):
  curso_user = input("ingrese una letra: ")
  lista_nueva = []
  for curso in lista:
    if curso[0][0].strip().lower() == curso_user:
      dato = [curso[0],curso[1],curso[2],curso[3],curso[4]]
      lista_nueva.append(dato)
  return imprimir_clase_de_lista(lista_nueva)

#lista_prueba = [["matematica",6,"miercoles",18,40],["matematica 2",3,"viernes",19,100],["literatura",1,"jueves",14,90],["fundamentos",1,"sabado",13,150],["fisica",1,"miercoles",18,180],]

lista_prueba = cargar_datos_cursos()

menu = int(input("Menú Principal\n 1 - Consultar los cursos que tienen más de 5 clases.\n 2 - Consultar los cursos que se dictan en un día indicado.\n 3 - Consultar el curso más intensivo.\n 4 - Consultar sobre un curso en especifico.\n 5 - Consultar sobre un curso con su letra inicial.\n 0 - Salir \n"))

while menu != 0:
  if menu == 1:
    mas_cinco_clases(lista_prueba)
  elif menu == 2:
    dia_semana(lista_prueba)
  elif menu == 3:
    mas_intensivo(lista_prueba)
  elif menu == 4:
    datos_curso(lista_prueba)
  elif menu == 5:
    datos_curso_letra(lista_prueba)
  else:
    print("ERROR - ingrese un valor válido")
      
  menu = int(input("Menú Principal\n 1 - Consultar los cursos que tienen más de 5 clases.\n 2 - Consultar los cursos que se dictan en un día indicado.\n 3 - Consultar el curso más intensivo.\n 4 - Consultar sobre un curso en especifico.\n 5 - Consultar sobre un curso con su letra inicial.\n 0 - Salir \n"))
  
##############################################################################################################

#Ejercicio 6: Nos contratan para realizar un sistema para una editorial. Se recibe un texto y se desea obtener la siguiente información:

texto = "Armani, el taco no, hace la personal y ahí se va, se va, se viene Martínez para el gol y va el tercero, y va el tercero, y va el tercero, y gol de River, gol de River"

#La longitud total del texto
def longitud_total(texto):
  return len(texto)

#La cantidad de palabras componen el texto
def cantidad_palabras(texto):
  return len(texto.split())

#La cantidad de oraciones que componen el texto.
def cantidad_oraciones(texto):
  return len(texto.split("."))

#La cantidad de palabras que comienzan con vocal o con consonante, dependiendo del valor ingresado por el usuario.
def cantidad_palabras_vc(texto):
  parametro = input("ingrese 'V' para vocal y 'C' para consonante: ")
  vocal = 0
  consonante = 0
  for texto.split() in texto:
    if texto.split()[0] in ("a","e","i","o","u"):
      vocal += 1
    else:
      consonante += 1
  if parametro.lower == "v":
    return vocal
  elif parametro.lower == "c":
    return consonante
  else:
    return "ingrese un dato válido"


print(cantidad_palabras_vc(texto))
